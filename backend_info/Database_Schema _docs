Password for DB - mpteam@5
When we sign in to the website:
i)	As admin – we can see all the events as well as the attendees of the events
ii)	As organizer – we can see all the events created by me and their specific list of people registered for that event. No privilege to see other organizers events
iii)	As attendee – we can see all the events and their details that we have registered for

When a person first sign up into the website, below details need to be provided.
USER_DETAILS
user_id
user_name
email
password
role [admin/organizer/attendee]
user_image (optional)
user_reated_at

There are few genere that are provided through this event management website and they are fixed. Any event organized should be with in this list.
GENERE_DETAILS
genre_id
genre_name
{Concert, Comedy show, Product launch, Tech conference, Hackathon/Bootcamp, Yoga & Meditation, Food, festival, Art exhibition}
When an organizer is creating an event he needs to provide this information
EVENT_DETAILS
event_id
event_name
event_image
description
date
location
event_created_at
no_of_tickets
general_tickets
vip_tickets
early_bird_tickets
general_ticket_price
vip_ticket_price
early_bird_ticket_price
genere

When an attendee is registering for an event then he/she need to provide the below details
ATTENDEE_DETAILS
attendee_id
user_id
event_id
name
email
phone
event_registered_at
gender
dob
ticket_type
ticket_price

Attendee can give a review on the event during/post the event
REVIEW_DETAILS
review_id
event_id
attendee_id
rating
comment
review_created_at



Attendee can give feedback post the event
FEEDBACK_DETAILS
feedback_id
event_id
attendee_id
feeback_text
feedback_created_at

Payment details of a ticket for an event is stored in the payment_details_table.
PAYMENT_DETAILS
payment_id
event_id
attendee_id
amount_paid
payment_status (success/failed)





-- USERS TABLE (Stores user accounts)
CREATE TABLE user_details (
    user_id SERIAL PRIMARY KEY,
    user_name VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password TEXT NOT NULL, -- Hashed password
    role VARCHAR(20) CHECK (role IN ('admin', 'organizer', 'attendee')) NOT NULL,
    user_image TEXT DEFAULT NULL, -- Optional
    user_created_at TIMESTAMP DEFAULT NOW()
);

-- GENRE TABLE (Fixed list of event genres)
CREATE TABLE genre_details (
    genre_id SERIAL PRIMARY KEY,
    genre_name VARCHAR(100) UNIQUE NOT NULL
);

-- Insert fixed genres
INSERT INTO genre_details (genre_name) VALUES
('Concert'), ('Comedy show'), ('Product launch'), ('Tech conference'),
('Hackathon/Bootcamp'), ('Yoga & Meditation'), ('Food festival'), ('Art exhibition');

-- EVENTS TABLE (Stores event information)
CREATE TABLE event_details (
    event_id SERIAL PRIMARY KEY,
    event_name VARCHAR(255) NOT NULL,
    event_image TEXT DEFAULT NULL,
    description TEXT NOT NULL,
    date TIMESTAMP NOT NULL,
    location VARCHAR(255) NOT NULL,
    event_created_at TIMESTAMP DEFAULT NOW(),
    no_of_tickets INT NOT NULL,
    general_tickets INT NOT NULL,
    vip_tickets INT NOT NULL,
    early_bird_tickets INT NOT NULL,
    general_ticket_price DECIMAL(10,2) NOT NULL,
    vip_ticket_price DECIMAL(10,2) NOT NULL,
    early_bird_ticket_price DECIMAL(10,2) NOT NULL,
    genre_id INTEGER REFERENCES genre_details(genre_id) ON DELETE RESTRICT,
    organizer_id INTEGER REFERENCES user_details(user_id) ON DELETE CASCADE
);

-- ATTENDEE TABLE (Stores event registrations)
CREATE TABLE attendee_details (
    attendee_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES user_details(user_id) ON DELETE CASCADE,
    event_id INTEGER REFERENCES event_details(event_id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(150) NOT NULL,
    phone VARCHAR(15),
    event_registered_at TIMESTAMP DEFAULT NOW(),
    gender VARCHAR(10) CHECK (gender IN ('Male', 'Female', 'Other')),
    dob DATE NOT NULL
);

-- REVIEWS TABLE (Stores event reviews)
CREATE TABLE review_details (
    review_id SERIAL PRIMARY KEY,
    event_id INTEGER REFERENCES event_details(event_id) ON DELETE CASCADE,
    attendee_id INTEGER REFERENCES attendee_details(attendee_id) ON DELETE CASCADE,
    rating INTEGER CHECK (rating BETWEEN 1 AND 5) NOT NULL,
    comment TEXT DEFAULT NULL,
    review_created_at TIMESTAMP DEFAULT NOW()
);

-- FEEDBACK TABLE (Stores attendee feedback)
CREATE TABLE feedback_details (
    feedback_id SERIAL PRIMARY KEY,
    event_id INTEGER REFERENCES event_details(event_id) ON DELETE CASCADE,
    attendee_id INTEGER REFERENCES attendee_details(attendee_id) ON DELETE CASCADE,
    feedback_text TEXT NOT NULL,
    feedback_created_at TIMESTAMP DEFAULT NOW()
);

-- PAYMENT TABLE (Tracks ticket payments)
CREATE TABLE payment_details (
    payment_id SERIAL PRIMARY KEY,
    event_id INTEGER REFERENCES event_details(event_id) ON DELETE CASCADE,
    attendee_id INTEGER REFERENCES attendee_details(attendee_id) ON DELETE CASCADE,
    amount_paid DECIMAL(10,2) NOT NULL,
    payment_status VARCHAR(10) CHECK (payment_status IN ('success', 'failed')) NOT NULL
);
